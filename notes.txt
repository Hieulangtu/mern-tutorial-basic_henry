step 1 theo Henry: git init
rồi mkdir server : để tạo folder server
sau đó : cd server
npm init
từ đây bắt đầu tạo backend, cài các thứ
 npm i express jsonwebtoken mongoose dotenv argon2 cors

cors : dùng để frontend nói chuyện vs backend
-> ví dụ trong frontend chay ở port 3000, backend là 5000. nên ko có nó ko nói chuyện đc

npm i --save-dev nodemon
nodemon: để phát triển trong môi truowgnf lập trình, tiện, save code là nó cập nhật luôn 
trên server

rồi trong package.json :
	"scripts": {
		"start": "node index",
		"test": "echo \"Error: no test specified\" && exit 1",
		"server": "nodemon index"
	},

JSON Web Token (JWT) là gì ? 
https://viblo.asia/p/cung-minh-tim-hieu-ve-json-web-token-jwt-Rk74axvAVeO

1. Json Web Token (JWT) là gì?
JWT là một tiêu chuẩn mở RFC 7519, được sử dụng như một người đại diện để 
trao đổi thông tin một cách an toàn giữa server và client thông qua một 
chuỗi JSON. Thông tin giao dịch thông qua JWT sẽ được bảo mật và có độ 
tin tưởng cao nhờ vào chữ ký điện tử để xác minh tính toàn vẹn sở hữu. 
Chữ ký điện tử sử dụng mã khóa công khai/ riêng tư sử dụng RSA, ECDSA với
thuật toán HMAC.

Để tiện hơn cho việc hiểu các khái niệm session , token , cookie các thứ thì mk
thấy có vài cái link này : 
 +https://anonystick.com/blog-developer/4-co-che-dang-nhap-bai-viet-nay-la-du-cho-dan-lap-trinh-phan-1-2020091071827696
 +https://anonystick.com/blog-developer/4-co-che-dang-nhap-bai-viet-nay-la-du-cho-dan-lap-trinh-phan-1-2020091071827696#t-0
 +https://anonystick.com/blog-developer/co-che-dang-nhap-voi-token-hon-cookie-va-session-nhu-the-nao-phan-2-2020091142676664
những link trên ở trang web khá hay có những bài thao khảo khác. Ngoài ra:
 +https://viblo.asia/p/su-khac-biet-giua-xac-thuc-dua-tren-session-va-token-1VgZvQ19KAw
 +https://topdev.vn/blog/session-la-gi-cookie-la-gi/
 +https://viblo.asia/p/json-web-token-hay-session-cookies-dau-moi-la-chan-ai-Qbq5Q0oJlD8

ta phải dùng chúng vì nếu ko có chúng, trong 2 lần gửi request lên server thì server
ko thể biết 2 lần đó có cùng là 1 người hay không. thế là xác thực lại
-> rất mất công 

Sang frontend 
touch .gitignore : tạo ra file ignore
->không còn track những thứ được nêu trong file

npx create-react-app client : cài react app vào folder mới client
xong rồi : cd client
npm start
đợi một tí
cd client
npm i react-bootstrap bootstrap axios react-router-dom
->axios để nói chuyện vs backend, react-router-dom để SPA
React Router là một thư viện chuẩn để định tuyến trong React. Nó cho phép điều hướng 
giữa các chế độ xem của các thành phần khác nhau trong Ứng dụng React, cho phép thay
đổi URL của trình duyệt và giữ giao diện người dùng đồng bộ với URL


thứ tự tạo component:
layout/landing
views/auth
auth/loginForm

Context: đây là folder quản lý trạng thái toàn bộ dự án
trong đó AuthContext quản lý trạng thái dự án, cứ cái j liên quan đến xác thực người dùng
->các component/component con khác không cần quản lý trạng thái nữa mà chỉ import từ AuthContext thôi

ở folder Context thì lại dùng create Context còn chỗ kahsc thì use nó

Reducers: lưu trữ trạng thái xác thực người dùng

ở AuthContext thì import axios vì phải nói chuyện với backend
Axios là thư viện để thực hiện yêu cầu HTTP trong React
->Dữ liệu được phản hồi và truy cập thông qua Response.data
Khi thực hiện yêu cầu HTTP bằng Axios, đối tượng Response có một số thuộc tính như :"data",
"status","headers"

folder Views : là các "mặt tiền"

****gõ rafce -> tạo ra các cấu trúc component